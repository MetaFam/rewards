import { sourcecred as cred1 } from 'sourcecred'
import cred2 from 'sourcecred'
import Papa from 'papaparse'

// Different imports behave differently between Node & the browser
const sc = cred1 ?? cred2

export const graphAPI = (
  { pluginId, weightedGraph, declaration, identityProposals }:
  {
    pluginId: string
    weightedGraph: typeof sc.core.weightedGraph.WeightedGraph
    declaration: typeof sc.core.declaration.Declaration
    identityProposals?: Array<typeof sc.core.identity.IdentityProposal>
  }
) => {
  const graphInput = {
    plugins: [
      {
        plugin: new sc.plugins.ConstructorPlugin({
          weightedGraph, declaration, identityProposals
        }),
        directoryContext: null,
        pluginId,
      }
    ],
    ledger: new sc.ledger.ledger.Ledger()
  }

  return sc.api.graph.graph(graphInput)
}

export const credRank = (
  { weightedGraph, ledger }:
  {
    weightedGraph: typeof sc.core.weightedGraph.WeightedGraph
    ledger: typeof sc.ledger.ledger.Ledger
  }
) => {
  const credrankInput = {
    pluginGraphs: [weightedGraph],
    ledger, // Use the ledger generated by your graph API test
    dependencies: [],
    weightOverrides: sc.core.weights.empty(),
    pluginsBudget: null,
    personalAttributions: []
  }

  return sc.api.credrank.credrank(credrankInput)
}

const bleed = (iter: Array<string>) => {
  const list = []
  for(const item of iter) list.push(item)
  return list.join('\n')
}

export const credData = async (
  { credGraph, ledger }:
  {
    credGraph: typeof sc.core.graph.Graph,
    ledger: typeof sc.ledger.ledger.Ledger
  }
) => {
  const { neo4j: { nodes, edges } } = (
    await sc.api.analysis.analysis({
      credGraph,
      ledger,
      featureFlags: { neo4j: true },
    })
  )
  const opts = { header: true, dynamicTyping: true }
  return {
    nodes: Papa.parse(bleed(nodes), opts),
    edges: Papa.parse(bleed(edges), opts),
  }
}
